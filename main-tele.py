import datetime
import requests
import wikipediaapi
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import telegram
from datetime import datetime
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler,  MessageHandler, Filters
import pytz
import random
from telebot import types
import itertools
import json

api_id = "21781680"
api_hash = "e46160ba2fff98eb765d159fa8056162"
YOUR_TOKEN = "5612538430:AAFPa_JE2gPei3K34yGahXG1DUeBQzAUeSI"
OWNER_ID = '@Peercifal'
# OW_api_key = '5e35367c101c25d4b1bef6098febc108'


bot = telegram.Bot(token=YOUR_TOKEN)


def convert_time(strr):
    strr = strr.replace("Z", "")
    a = strr.split(":")
    h = str(int(a[0]) + 1)
    return f"{h}:{a[1]}:{a[2]}"


def convert_data(strr):
    strr = strr.split("-")
    return strr[2] + "/" + strr[1] + "/" + strr[0]


def diffdate(data, f):
    datetime_format = '%d/%m/%Y %H:%M:%S'
    now = datetime.now()
    date1 = data + " " + f
    date2 = now.strftime("%d/%m/%Y %H:%M:%S")
    diff = (datetime.strptime(date1, datetime_format) -
            datetime.strptime(date2, datetime_format))
    return diff


def control_year(year):
    response = requests.get("http://ergast.com/api/f1/{}".format(year))

    if response.status_code == 200:
        return year
    else:
        return "current"


current_year = datetime.now().year

def get_weather(lat, lon):
    try:
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid=5e35367c101c25d4b1bef6098febc108&units=metric"
        )
        if r.status_code == 200:
            weather_data = r.json()
            current_weather = weather_data['weather'][0]['description']
            temperature = weather_data['main']['temp']
            humidity = weather_data['main']['humidity']

            weather_info = f"\n‚òÄÔ∏è –ü–æ–≥–æ–¥–∞ –Ω–∞ —Ç—Ä–∞—Å—Å–µ:\n"
            weather_info += f"‚òâ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞: {current_weather}\n"
            weather_info += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
            weather_info += f"üí¶ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"

            return weather_info
    except ValueError:
        print('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')


def start(update, context):
    keyboard = [[InlineKeyboardButton("üëâ–ù–ê–ß–ê–¢–¨üëà", callback_data='menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    image_url = 'https://besthqwallpapers.com/ru/download/original/62035'
    caption = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ñ–æ—Ä–º—É–ª—ã 1! üèÅüòä\n\n–Ø - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –≥–∏–¥ –ø–æ —ç—Ç–æ–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –≥–æ–Ω–æ—á–Ω–æ–π —Å–µ—Ä–∏–∏. –°–æ –º–Ω–æ–π —Ç—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—à—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π. üìàüèéÔ∏è\n–Ø —É–º–µ—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–æ–Ω–∫–∏ –∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–¥—É—â–∏—Ö –≥–æ–Ω–∫–∞—Ö, –ø–∏–ª–æ—Ç–∞—Ö –∏ –∫–æ–º–∞–Ω–¥–∞—Ö. üí™üåü\n–ù–∞–∂–º–∏ –Ω–∞—á–∞—Ç—å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±—è –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø—Ä–æ—à–ª—ã—Ö –∏–ª–∏ –±—É–¥—É—â–∏—Ö –∑–∞–µ–∑–¥–∞—Ö.ü§îüí°\n–ì–æ—Ç–æ–≤ –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –±—ã—Å—Ç—Ä–æ–π –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–π –≥–æ–Ω–∫–∏ –Ω–∞ –≤—ã—Å–æ—á–∞–π—à–µ–º —É—Ä–æ–≤–Ω–µ? –¢–æ–≥–¥–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è, –≤–µ–¥—å —è —Å–æ–±–∏—Ä–∞—é—Å—å –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º—É–ª–µ 1.üèéÔ∏èüåç\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞—á–∞—Ç—å, –∏ –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –º–∏—Ä–æ–º –≥—Ä–∞–Ω-–ø—Ä–∏! üöÄüî•\n\n–î–ª—è —Å–≤—è–∑–∏ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –Ω–∞–∂–º–∏ {OWNER_ID}'
    bot.send_photo(chat_id=update.effective_chat.id,
                   photo=image_url, caption=caption, reply_markup=reply_markup)


def menu(update, context):
    image_url = 'https://disk.yandex.ru/i/NR-SqHMad6zVIQ'
    keyboard = [
        [InlineKeyboardButton("üë®‚ÄçüöÄ –ü–∏–ª–æ—Ç—ã", callback_data='drivers'), InlineKeyboardButton(
            "üèé –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã", callback_data='constructors')],
        [InlineKeyboardButton("üèÅ –ü–æ—Å–ª–µ–¥–Ω—è—è –≥–æ–Ω–∫–∞", callback_data='last_race')],
        [InlineKeyboardButton("üîú –ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è –≥–æ–Ω–∫–∞",
                              callback_data='upcoming_races')],
        [InlineKeyboardButton("üïö –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è",
                              callback_data='last_qualifying')],
        [InlineKeyboardButton("ü•á –ß–µ–º–ø–∏–æ–Ω—ã –ø—Ä–æ—à–ª–æ–≥–æ",
                              callback_data='champion'), InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏",
                                                                              callback_data='news')],
        [InlineKeyboardButton("üõ£Ô∏è –¢—Ä–∞—Å—Å—ã", callback_data='circuits'), InlineKeyboardButton(
            "üé• –ì–∏—Ñ–∫–∞", callback_data='gif')]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    bot.send_photo(chat_id=update.effective_chat.id, photo=image_url)
    context.bot.send_message(chat_id=update.effective_chat.id,
                         text="<b>ü§î –û —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—åüëâ:</b>", parse_mode='HTML', reply_markup=reply_markup)


def button(update, context):
    query = update.callback_query
    if query.data == '/start':
        start(update, context)
    elif query.data == '/menu':
        menu(update, context)
    elif query.data == 'drivers':
        drivers_info = get_drivers_info()
        query.message.reply_text(drivers_info)
    elif query.data == 'constructors':
        constructors_info = get_constructors_info()
        query.message.reply_text(constructors_info)
    elif query.data == 'last_race':
        last_race_info = get_last_race_info()
        query.message.reply_text(last_race_info)
    elif query.data == 'upcoming_races':
        upcoming_races_info = get_upcoming_race_info()
        query.message.reply_text(upcoming_races_info)
    elif query.data == 'last_qualifying':
        upcoming_races_info = get_qualifying_results()
        query.message.reply_text(upcoming_races_info)
    elif query.data == 'circuits':
        circuits_info = get_circuits_info()
        query.message.reply_text(circuits_info)
    elif query.data == 'gif':
        gif(update, context)
    elif query.data == 'champion':
        send_champion_info(update, context)
    elif query.data == 'news':
        news = get_f1_news()
        for article in news:
            context.bot.send_message(
                chat_id=query.message.chat_id, text=article, parse_mode='HTML')

        keyboard = [
            [InlineKeyboardButton("–ï—â–µ –Ω–æ–≤–æ—Å—Ç—å", callback_data='news')],
            [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='menu')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        context.bot.send_message(chat_id=query.message.chat_id,
                                 text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


def get_f1_news():
    api_key = '33ce6ff0cd2240b68c329582a81ba240'
    url = f'https://newsapi.org/v2/everything?q=formula%201&apiKey={api_key}&language=ru'
    response = requests.get(url)
    data = response.json()

    if data['status'] == 'ok':
        articles = data['articles']

        with open('sent_articles.txt', 'r', encoding='utf-8') as file:
            sent_articles = file.read().splitlines()

        for article in articles:
            title = article['title']
            description = article['description']
            url = article['url']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å—Ç–∞—Ç—å—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
            if title not in sent_articles:
                news = f'<a href="{url}">{title}</a>\n\n{description}\n'

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
                sent_articles.append(title)

                with open('sent_articles.txt', 'a', encoding='utf-8') as file:
                    file.write(title + '\n')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞
                if len(sent_articles) >= 10:
                    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª–µ
                    with open('sent_articles.txt', 'w', encoding='utf-8') as file:
                        file.write('')

                return [news]

    return []


def gif(update, context):

    response = requests.get(
        "https://api.tenor.com/v2/search?q=Formula1&key=AIzaSyAzh3HksxGiFb7jU2xpjBDb_ie-eeBe0cE&limit=20")
    data = response.json()

    if 'results' in data:
        gifs = data['results']
        gif = random.choice(gifs)
        gif_url = gif['media_formats']['mediumgif']['url']
        context.bot.send_message(
            chat_id=update.effective_chat.id, text='–ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é')
        context.bot.send_animation(
            chat_id=update.effective_chat.id, animation=gif_url)
    else:
        context.bot.send_message(
            chat_id=update.effective_chat.id, text="Failed to retrieve GIF.")


def get_drivers_info():
    response = requests.get(
        'http://ergast.com/api/f1/{}/driverStandings.json'.format(current_year))
    standings_data = response.json(
    )['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings']
    standings_data.sort(key=lambda x: int(x['position']))

    drivers_info = ''
    for i, driver in enumerate(standings_data):
        driver_info = driver['Driver']
        nationality = driver_info['nationality']
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–ª–∞–≥–∞-—ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        flag = get_flag_emoji(nationality)
        drivers_info += f"{i+1}. {flag} {driver_info['givenName']} {driver_info['familyName']} - {driver['points']} –æ—á–∫–æ–≤\n"
    drivers_info += "\n –ü–∏–ª–æ—Ç—ã —Ä–∞—Å—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ –ª–∏—á–Ω–æ–º—É –∑–∞—á–µ—Ç—É –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∏–ª–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1' –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–∏–ª–æ—Ç–∞) –∏–ª–∏ –ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é:"
    return drivers_info


def get_flag_emoji(nationality):
    flag_emojis = {
        'British': 'üá¨üáß',
        'German': 'üá©üá™',
        'Spanish': 'üá™üá∏',
        'Thai': 'üáπüá≠',
        'Finnish': 'üá´üáÆ',
        'Dutch': 'üá≥üá±',
        'French': 'üá´üá∑',
        'Monegasque': 'üá≤üá®',
        'Danish': 'üá©üá∞',
        'Mexican': 'üá≤üáΩ',
        'Australian': 'üá¶üá∫',
        'American': 'üá∫üá∏',
        'Chinese': 'üá®üá≥',
        'Canadian': 'üá®üá¶',
        'Japanese': 'üáØüáµ',
        'New Zealander': 'üá≥üáø'# –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–ª–∞–≥–æ–≤-—ç–º–æ–¥–∑–∏
    }
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
    return flag_emojis.get(nationality, '')


def get_driver_details(driver_number):
    response = requests.get(
        'http://ergast.com/api/f1/{}/driverStandings.json'.format(current_year))
    standings_data = response.json(
    )['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings']
    if driver_number > 0 and driver_number <= len(standings_data):
        driver_info = standings_data[driver_number-1]['Driver']
        driver_details = f"\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏–ª–æ—Ç–µ:\n"
        driver_details += f"üë±‚Äç‚ôÇÔ∏è –ò–º—è: {driver_info['givenName']} {driver_info['familyName']}\n"
        driver_details += f"{get_flag_emoji(driver_info['nationality'])} –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {driver_info['nationality']}\n"
        driver_details += f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {driver_info['dateOfBirth']}\n"
        driver_details += f"#Ô∏è‚É£ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {driver_info['permanentNumber']}\n"
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏
        driver_details += f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {get_driver_wikipedia_link(driver_info)}\n\n"
        return driver_details + "\n–ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é."
    else:
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∏–ª–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä –ø–∏–ª–æ—Ç–∞."


def get_driver_wikipedia_link(driver):
    wiki_wiki = wikipediaapi.Wikipedia('mrvoropaev@gmail.com')
    page_py = wiki_wiki.page(f"{driver['givenName']} {driver['familyName']}")
    if page_py.exists():
        return page_py.fullurl
    else:
        return ""


def get_champion_info(year):
    response = requests.get(
        f'http://ergast.com/api/f1/{year}/driverStandings/1.json')
    champion_data = response.json(
    )['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings'][0]

    driver_name = champion_data['Driver']['givenName'] + \
        ' ' + champion_data['Driver']['familyName']
    constructor_name = champion_data['Constructors'][0]['name']

    return driver_name, constructor_name


def send_champion_info(update, context):
    keyboard_champ = []
    years = list(range(1950, 2023))
    rows = list(itertools.zip_longest(*[iter(years)] * 3, fillvalue=None))

    for row in rows:
        buttons = []
        for year in row:
            if year is not None:
                button_text = str(year)
                button_callback = f"champion_{year}"
                button = InlineKeyboardButton(
                    text=button_text, callback_data=button_callback)
                buttons.append(button)
        keyboard_champ.append(buttons)

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard_champ)

    if update.message is not None:
        chat_id = update.message.chat.id
    else:
        chat_id = update.effective_chat.id

    context.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:",
                             reply_markup=reply_markup)


def handle_champion_query(update, context):
    year = update.callback_query.data.split('_')[1]
    champion_info = get_champion_info(year)
    champion_info_str = ", ".join(champion_info)
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text=champion_info_str + "\n–ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é.")


def handle_message(update, context):
    if update.message.text == '/menu':
        menu(update, context)  # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ menu
        return

    try:
        driver_number = int(update.message.text)
        driver_details = get_driver_details(driver_number)
        context.bot.send_message(
            chat_id=update.effective_chat.id, text=driver_details)
    except ValueError:
        context.bot.send_message(
            chat_id=update.effective_chat.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')


def get_constructors_info():
    response = requests.get(
        'http://ergast.com/api/f1/{}/constructorStandings.json'.format(current_year))
    standings_data = response.json(
    )['MRData']['StandingsTable']['StandingsLists'][0]['ConstructorStandings']
    constructors_data = []

    for standing in standings_data:
        constructor_data = standing['Constructor']
        constructors_data.append(constructor_data)

    constructors_info = []

    for constructor in constructors_data:
        info = {
            "–ù–∞–∑–≤–∞–Ω–∏–µ": constructor['name'],
            "–ü–æ–¥—Ä–æ–±–Ω–æ": constructor['url'],
            "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": constructor['nationality']
        }
        constructors_info.append(info)

    output = ""
    for info in constructors_info:
        output += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {info['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
        output += f"–ü–æ–¥—Ä–æ–±–Ω–æ: {info['–ü–æ–¥—Ä–æ–±–Ω–æ']}\n"
        output += f"–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {info['–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å']}\n\n"

    return output + "\n–ö–æ–º–∞–Ω–¥—ã —Ä–∞—Å—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ –º–µ—Å—Ç—É –≤ –∑–∞—á–µ—Ç–µ –≤ –∫—É–±–∫–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç\n\n–ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é."

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ IndexError


def get_constructor_info(constructor_name):
    try:
        response = requests.get(
            'http://ergast.com/api/f1/{}/constructors.json'.format(current_year))
        constructors_data = response.json(
        )['MRData']['ConstructorTable']['Constructors']

        for constructor_data in constructors_data:
            if constructor_data['name'] == constructor_name:
                return constructor_data
        return None
    except IndexError:
        print("–û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å —Å–ø–∏—Å–∫–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        return None


def get_last_race_info():
    race_data = None
    try:
        response = requests.get(
            'http://ergast.com/api/f1/current/last/results.json')

        if response.status_code == 200:
            race_data = response.json()['MRData']['RaceTable']['Races'][0]
            last_race_name = race_data['raceName']
            race_info = f"–ü–æ—Å–ª–µ–¥–Ω—è—è –≥–æ–Ω–∫–∞:\n"
            race_info += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {race_data['raceName']}\n"
            race_info += f"–î–∞—Ç–∞: {race_data['date']}\n"
            race_info += f"–ö—Ä—É–≥–æ–≤: {race_data.get('laps', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')}\n"
            race_info += f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {race_data.get('distance', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')}\n"

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏—é
            wiki_link = race_data.get('url', '')
            if wiki_link:
                race_info += f"–°—Å—ã–ª–∫–∞ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏—é: {wiki_link}\n"

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–æ–Ω–∫–µ –§–æ—Ä–º—É–ª—ã 1
            race_info += get_last_race_news(last_race_name)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏ –ø–æ –ø–∏–ª–æ—Ç–∞–º
            race_info += get_race_results()

            return race_info + "\n–ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é."
        else:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    except requests.exceptions.RequestException as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö:", str(e))

    return race_data


def get_race_results():
    race_results_data = None
    try:
        response = requests.get(
            'http://ergast.com/api/f1/current/last/results.json')

        if response.status_code == 200:
            race_results_data = response.json(
            )['MRData']['RaceTable']['Races'][0]
            race_results_info = "\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–Ω–∫–∏ (–ø–æ–∑–∏—Ü–∏—è, –∏–º—è, –≤—Ä–µ–º—è, –æ—á–∫–∏):\n"
            winner_info = race_results_data['Results'][0]
            winner_name = winner_info['Driver']['givenName'] + \
                ' ' + winner_info['Driver']['familyName']
            winner_time = winner_info.get('Time', {}).get('time', 'N/A')
            nationality = winner_info['Driver']['nationality']
            flag = get_flag_emoji(nationality)
            points = winner_info['points']
            race_results_info += f"üèÜ {flag} {winner_name} - {winner_time} ({points})\n"
            # race_results_info += f"–û—á–∫–∏: {points}\n\n"

            for i, result in enumerate(race_results_data['Results'][1:], start=2):
                driver_name = result['Driver']['givenName'] + \
                    ' ' + result['Driver']['familyName']
                time_difference = result.get('Time', {}).get('time', 'N/A')
                nationality = result['Driver']['nationality']
                flag = get_flag_emoji(nationality)
                points = result['points']
                race_results_info += f"{i}. {flag} {driver_name} - {time_difference} ({points})\n"

            return race_results_info
        else:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    except requests.exceptions.RequestException as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö:", str(e))

    return race_results_data


def get_last_race_news(last_race_name, num_articles=3):
    api_key = '33ce6ff0cd2240b68c329582a81ba240'
    last_race_name = last_race_name.replace(' ', '%20')
    newsapi_link = f"https://newsapi.org/v2/everything?q={last_race_name}&apiKey={api_key}&language=ru"

    response = requests.get(newsapi_link)

    if response.status_code == 200:
        news = response.json()
        articles = news['articles']
        news_info = "\n–ù–æ–≤–æ—Å—Ç–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–æ–Ω–∫–µ –§–æ—Ä–º—É–ª—ã 1 üëâ\n"

        for i, article in enumerate(articles[:num_articles]):
            title = article['title']
            url = article['url']
            news_info += f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
            news_info += f"–°—Å—ã–ª–∫–∞: {url}\n\n"

        return news_info
    else:
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π')
        return ""


def get_qualifying_results():
    qualifying_data = None
    try:
        response = requests.get(
            'http://ergast.com/api/f1/current/last/qualifying.json')

        if response.status_code == 200:
            qualifying_data = response.json(
            )['MRData']['RaceTable']['Races'][0]
            qualifying_info = "\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏:\n\n"

            for result in qualifying_data['QualifyingResults']:
                driver_name = result['Driver']['givenName'] + \
                    ' ' + result['Driver']['familyName']
                position = result['position']
                nationality = result['Driver']['nationality']
                flag = get_flag_emoji(nationality)
                q1_time = result['Q1']
                q2_time = result.get('Q2', 'N/A')
                # –ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ get(), –µ—Å–ª–∏ –∫–ª—é—á 'Q3' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ result, –æ–Ω –≤–µ—Ä–Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'N/A' –≤–º–µ—Å—Ç–æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è KeyError
                q3_time = result.get('Q3', 'N/A')
                qualifying_info += f"{position}. {flag} {driver_name} \n"
                qualifying_info += f"Q1: {q1_time}\n"
                qualifying_info += f"Q2: {q2_time}\n"
                qualifying_info += f"Q3: {q3_time}\n\n"

            return qualifying_info + "\n–ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é."
        else:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    except requests.exceptions.RequestException as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö:", str(e))

    return qualifying_data


def get_circuits_info():
    response = requests.get('http://ergast.com/api/f1/2023/circuits.json')
    circuits_data = response.json()['MRData']['CircuitTable']['Circuits']

    circuits_info = ""
    for circuit_data in circuits_data:
        circuit_name = circuit_data['circuitName']
        circuit_location = circuit_data['Location']['locality'] + \
            ', ' + circuit_data['Location']['country']

        country = circuit_data['Location']['country']
        flag_country = get_flag_emoji_country(country)
        circuits_info += f"üèÅ –ù–∞–∑–≤–∞–Ω–∏–µ: {circuit_name}\n"
        circuits_info += f"üñà –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {circuit_location}{flag_country}\n"
        circuits_info += f"‚ùì –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {get_circuit_wikipedia_link(circuit_name)}\n\n"

    return circuits_info + "\n–ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é."


def get_circuit_wikipedia_link(circuit_name):
    wiki_wiki = wikipediaapi.Wikipedia('mrvoropaev@gmail.com')
    page_py = wiki_wiki.page(circuit_name)
    if page_py.exists():
        return page_py.fullurl
    else:
        return ""


def get_upcoming_race_info():
    ergast_link = "https://ergast.com/api/f1/current/next.json"

    response = requests.get(ergast_link)

    if response.status_code == 200:
        race_info = response.json()
        race_data = race_info['MRData']['RaceTable']['Races'][0]
        race_name = race_data['raceName']
        race_location = race_data['Circuit']['Location']
        circuit_name = race_data['Circuit']['circuitName']
        country = race_data['Circuit']['Location']['country']
        date = race_data['date']
        time = race_data['time']

        # Convert time to local time
        utc_time = datetime.strptime(date + " " + time, "%Y-%m-%d %H:%M:%SZ")
        # Replace 'Europe/Moscow' with your desired timezone
        local_timezone = pytz.timezone('Europe/Moscow')
        local_time = utc_time.replace(tzinfo=pytz.utc).astimezone(
            local_timezone).strftime('%H:%M')

        flag_country = get_flag_emoji_country(country)
        upcoming_race_info = f"\nüèé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π –≥–æ–Ω–∫–µ –§–æ—Ä–º—É–ª—ã1: \n"
        upcoming_race_info += f"üîÑ –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–Ω–∫–∏: {race_name}  \n"
        upcoming_race_info += f"üõ£ –¢—Ä–∞—Å—Å–∞: {circuit_name} \n"
        upcoming_race_info += f"{flag_country} –°—Ç—Ä–∞–Ω–∞: {country}\n"
        upcoming_race_info += f"üìÖ –î–∞—Ç–∞: {date} \n"
        upcoming_race_info += f"‚è≥ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ):  {local_time}\n"

        # Get weather information for the race location
        lat = race_location['lat']
        lon = race_location['long']
        # OW_api_key = "5e35367c101c25d4b1bef6098febc108"
        weather_info = get_weather(lat, lon)
        upcoming_race_info += weather_info

        stream_link = check_live_stream()
        if stream_link:
            telegram_link = stream_link
            upcoming_race_info += f"üé• –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é: {telegram_link}\n"


        return upcoming_race_info + "\n–ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é."
    else:
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–µ–¥—É—é—â–µ–π –≥–æ–Ω–∫–µ')
        return ""

def get_flag_emoji_country(country):
    flag_emojis_country = {
        'Australia': 'üá¶üá∫',
        'USA': 'üá∫üá∏',
        'Bahrain': 'üáßüá≠',
        'Azerbaijan': 'üá¶üáø',
        'Netherlands': 'üá≥üá±',
        'Spain': 'üá™üá∏',
        'Hungary': 'üá≠üá∫',
        'Brazil': 'üáßüá∑',
        'Singapore': 'üá∏üá¨',
        'Monaco': 'üá≤üá®',
        'Italy': 'üáÆüáπ',
        'Austria': 'üá¶üáπ',
        'France': 'üá´üá∑',
        'Mexico': 'üá≤üáΩ',
        'UK': 'üá¨üáß',
        'Belgium': 'üáßüá™',
        'Japan': 'üáØüáµ',
        'Canada': 'üá®üá¶',
        'UAE': 'üá¶üá™',
        'Saudi Arabia': 'üá∏üá¶',
        'New Zealand': 'üá≥üáø'
        # –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–ª–∞–≥–æ–≤-—ç–º–æ–¥–∑–∏
    }
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
    return flag_emojis_country.get(country, '')

def check_live_stream():
    channel_username = 'stanizlavsky'
    channel = bot.get_chat('@' + channel_username)

    updates = bot.get_updates()
    for update in updates:
        message = update.effective_message
        if message.chat.id == channel.id and message.live_period and message.live_period > 0:
            return 'https://t.me/' + channel_username

    return False


def main():
    updater = Updater(bot=bot, use_context=True)
    dp = updater.dispatcher
    # message_handler = MessageHandler(Filters.text, handle_message)
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CallbackQueryHandler(menu, pattern='^menu$'))
    dp.add_handler(CallbackQueryHandler(
        handle_champion_query, pattern='^champion_'))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(MessageHandler(Filters.text, handle_message))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()